name: Access MongoDB Credentials from Vault

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

env:
  VAULT_ADDR: "https://vault-hoodk-public-vault-fcef8209.ef380317.z1.hashicorp.cloud:8200"
  VAULT_NAMESPACE: "admin"

jobs:
  get-creds:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Vault Credentials
        id: vault_login
        run: |
          # 1. Get the GitHub Actions OIDC token (with audience for bound_audiences matching)
          JWT_TOKEN=$(curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/K-action123" | jq -r .value)

          # Troubleshooting: Decode and print JWT claims (mask sensitive parts if needed)
          echo "--- Decoded JWT Claims for Debugging ---"
          DECODED_CLAIMS=$(echo "$JWT_TOKEN" | jq -R 'split(".") | .[1] | @base64d | fromjson')
          echo "$DECODED_CLAIMS"  # This will show claims like 'ref', 'repository', 'aud', etc.

          # 2. Authenticate to Vault using the OIDC token (with -v for verbose error details)
          LOGIN_RESPONSE=$(curl -sSLfv -X POST -H "Content-Type: application/json" \
          -H "X-Vault-Namespace: ${{ env.VAULT_NAMESPACE }}" \
          -d "{\"jwt\": \"$JWT_TOKEN\", \"role\": \"github-hoodk-role\"}" \
          "${{ env.VAULT_ADDR }}/v1/auth/jwt/login")
          
          # Troubleshooting: Check if login failed and print full response
          if [[ $LOGIN_RESPONSE == *"error"* ]]; then
            echo "--- Vault Login Failed ---"
            echo "$LOGIN_RESPONSE"
            exit 1  # Stop the step on error for easier debugging
          fi
          
          VAULT_TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.auth.client_token')

          # 3. Use the Vault token to retrieve dynamic credentials from the secrets engine (with -v)
          SECRET_RESPONSE=$(curl -sSLv -H "X-Vault-Token: $VAULT_TOKEN" \
          -H "X-Vault-Namespace: ${{ env.VAULT_NAMESPACE }}" \
          "${{ env.VAULT_ADDR }}/v1/database/creds/hoodk-role")
          
          # Troubleshooting: Check if secret fetch failed
          if [[ $SECRET_RESPONSE == *"error"* ]]; then
            echo "--- Secret Fetch Failed ---"
            echo "$SECRET_RESPONSE"
            exit 1
          fi
          
          SECRET_DATA=$(echo "$SECRET_RESPONSE" | jq -r '.data')

          # 4. Extract username and password from the JSON response
          MONGO_USER=$(echo "$SECRET_DATA" | jq -r '.username')
          MONGO_PASSWORD=$(echo "$SECRET_DATA" | jq -r '.password')

          # 5. Mask the sensitive values in the logs
          echo "::add-mask::$MONGO_USER"
          echo "::add-mask::$MONGO_PASSWORD"

          # 6. Set the values as step outputs
          echo "MONGO_USER=$MONGO_USER" >> "$GITHUB_OUTPUT"
          echo "MONGO_PASSWORD=$MONGO_PASSWORD" >> "$GITHUB_OUTPUT"

          # 7. Use the same Vault token to retrieve static credentials from KV secrets engine
          STATIC_SECRET_RESPONSE=$(curl -sSl -H "X-Vault-Token: $VAULT_TOKEN" \
          -H "X-Vault-Namespace:${{ env.VAULT_NAMESPACE }}" \
          "${{ env.VAULT_ADDR }}/v1/kv/data/mongodb-config")

          if [[ $STATIC_SECRET_RESPONSE == *"error"* ]]; then
            echo "--- Static Secret Fetch Failed ---"
            echo "$STATIC_SECRET_RESPONSE"
            exit 1
          fi

          # 8. Extract the host and dbname from the JSON response
          MONGO_HOST=$(echo "$STATIC_SECRET_RESPONSE" | jq -r '.data.data.host')
          MONGO_DB_NAME=$(echo "$STATIC_SECRET_RESPONSE" | jq -r '.data.data.dbname')

          # 9. Mask the sensitive values in the logs
          echo "::add-mask::$MONGO_HOST"
          echo "::add-mask::$MONGO_DB_NAME"

          # 10. Set the values as step outputs
          echo "MONGO_HOST=$MONGO_HOST" >> "$GITHUB_OUTPUT"
          echo "MONGO_DB_NAME=$MONGO_DB_NAME" >> "$GITHUB_OUTPUT"
          
      - name: Use the MongoDB Credentials
        run: |
          echo "--- Dynamic Credentials Retrieved ---"
          echo "Username: ${{ steps.vault_login.outputs.MONGO_USER }}"
          echo "Password: ${{ steps.vault_login.outputs.MONGO_PASSWORD }}"